/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cgs.mpagent.proto;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class JavaProcess extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"JavaProcess\",\"namespace\":\"com.cgs.mpagent.proto\",\"fields\":[{\"name\":\"pid\",\"type\":\"int\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"heapMemoryUsed\",\"type\":\"long\"},{\"name\":\"heapMemoryMax\",\"type\":\"long\"},{\"name\":\"nonheapMemoryUsed\",\"type\":\"long\"},{\"name\":\"nonheapMemoryMax\",\"type\":\"long\"},{\"name\":\"threadCount\",\"type\":\"int\"},{\"name\":\"daemonThreadCount\",\"type\":\"int\"},{\"name\":\"peakThreadCount\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int pid;
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public long heapMemoryUsed;
  @Deprecated public long heapMemoryMax;
  @Deprecated public long nonheapMemoryUsed;
  @Deprecated public long nonheapMemoryMax;
  @Deprecated public int threadCount;
  @Deprecated public int daemonThreadCount;
  @Deprecated public int peakThreadCount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public JavaProcess() {}

  /**
   * All-args constructor.
   */
  public JavaProcess(java.lang.Integer pid, java.lang.CharSequence name, java.lang.Long heapMemoryUsed, java.lang.Long heapMemoryMax, java.lang.Long nonheapMemoryUsed, java.lang.Long nonheapMemoryMax, java.lang.Integer threadCount, java.lang.Integer daemonThreadCount, java.lang.Integer peakThreadCount) {
    this.pid = pid;
    this.name = name;
    this.heapMemoryUsed = heapMemoryUsed;
    this.heapMemoryMax = heapMemoryMax;
    this.nonheapMemoryUsed = nonheapMemoryUsed;
    this.nonheapMemoryMax = nonheapMemoryMax;
    this.threadCount = threadCount;
    this.daemonThreadCount = daemonThreadCount;
    this.peakThreadCount = peakThreadCount;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return pid;
    case 1: return name;
    case 2: return heapMemoryUsed;
    case 3: return heapMemoryMax;
    case 4: return nonheapMemoryUsed;
    case 5: return nonheapMemoryMax;
    case 6: return threadCount;
    case 7: return daemonThreadCount;
    case 8: return peakThreadCount;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: pid = (java.lang.Integer)value$; break;
    case 1: name = (java.lang.CharSequence)value$; break;
    case 2: heapMemoryUsed = (java.lang.Long)value$; break;
    case 3: heapMemoryMax = (java.lang.Long)value$; break;
    case 4: nonheapMemoryUsed = (java.lang.Long)value$; break;
    case 5: nonheapMemoryMax = (java.lang.Long)value$; break;
    case 6: threadCount = (java.lang.Integer)value$; break;
    case 7: daemonThreadCount = (java.lang.Integer)value$; break;
    case 8: peakThreadCount = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'pid' field.
   */
  public java.lang.Integer getPid() {
    return pid;
  }

  /**
   * Sets the value of the 'pid' field.
   * @param value the value to set.
   */
  public void setPid(java.lang.Integer value) {
    this.pid = value;
  }

  /**
   * Gets the value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'heapMemoryUsed' field.
   */
  public java.lang.Long getHeapMemoryUsed() {
    return heapMemoryUsed;
  }

  /**
   * Sets the value of the 'heapMemoryUsed' field.
   * @param value the value to set.
   */
  public void setHeapMemoryUsed(java.lang.Long value) {
    this.heapMemoryUsed = value;
  }

  /**
   * Gets the value of the 'heapMemoryMax' field.
   */
  public java.lang.Long getHeapMemoryMax() {
    return heapMemoryMax;
  }

  /**
   * Sets the value of the 'heapMemoryMax' field.
   * @param value the value to set.
   */
  public void setHeapMemoryMax(java.lang.Long value) {
    this.heapMemoryMax = value;
  }

  /**
   * Gets the value of the 'nonheapMemoryUsed' field.
   */
  public java.lang.Long getNonheapMemoryUsed() {
    return nonheapMemoryUsed;
  }

  /**
   * Sets the value of the 'nonheapMemoryUsed' field.
   * @param value the value to set.
   */
  public void setNonheapMemoryUsed(java.lang.Long value) {
    this.nonheapMemoryUsed = value;
  }

  /**
   * Gets the value of the 'nonheapMemoryMax' field.
   */
  public java.lang.Long getNonheapMemoryMax() {
    return nonheapMemoryMax;
  }

  /**
   * Sets the value of the 'nonheapMemoryMax' field.
   * @param value the value to set.
   */
  public void setNonheapMemoryMax(java.lang.Long value) {
    this.nonheapMemoryMax = value;
  }

  /**
   * Gets the value of the 'threadCount' field.
   */
  public java.lang.Integer getThreadCount() {
    return threadCount;
  }

  /**
   * Sets the value of the 'threadCount' field.
   * @param value the value to set.
   */
  public void setThreadCount(java.lang.Integer value) {
    this.threadCount = value;
  }

  /**
   * Gets the value of the 'daemonThreadCount' field.
   */
  public java.lang.Integer getDaemonThreadCount() {
    return daemonThreadCount;
  }

  /**
   * Sets the value of the 'daemonThreadCount' field.
   * @param value the value to set.
   */
  public void setDaemonThreadCount(java.lang.Integer value) {
    this.daemonThreadCount = value;
  }

  /**
   * Gets the value of the 'peakThreadCount' field.
   */
  public java.lang.Integer getPeakThreadCount() {
    return peakThreadCount;
  }

  /**
   * Sets the value of the 'peakThreadCount' field.
   * @param value the value to set.
   */
  public void setPeakThreadCount(java.lang.Integer value) {
    this.peakThreadCount = value;
  }

  /** Creates a new JavaProcess RecordBuilder */
  public static com.cgs.mpagent.proto.JavaProcess.Builder newBuilder() {
    return new com.cgs.mpagent.proto.JavaProcess.Builder();
  }
  
  /** Creates a new JavaProcess RecordBuilder by copying an existing Builder */
  public static com.cgs.mpagent.proto.JavaProcess.Builder newBuilder(com.cgs.mpagent.proto.JavaProcess.Builder other) {
    return new com.cgs.mpagent.proto.JavaProcess.Builder(other);
  }
  
  /** Creates a new JavaProcess RecordBuilder by copying an existing JavaProcess instance */
  public static com.cgs.mpagent.proto.JavaProcess.Builder newBuilder(com.cgs.mpagent.proto.JavaProcess other) {
    return new com.cgs.mpagent.proto.JavaProcess.Builder(other);
  }
  
  /**
   * RecordBuilder for JavaProcess instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<JavaProcess>
    implements org.apache.avro.data.RecordBuilder<JavaProcess> {

    private int pid;
    private java.lang.CharSequence name;
    private long heapMemoryUsed;
    private long heapMemoryMax;
    private long nonheapMemoryUsed;
    private long nonheapMemoryMax;
    private int threadCount;
    private int daemonThreadCount;
    private int peakThreadCount;

    /** Creates a new Builder */
    private Builder() {
      super(com.cgs.mpagent.proto.JavaProcess.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cgs.mpagent.proto.JavaProcess.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.pid)) {
        this.pid = data().deepCopy(fields()[0].schema(), other.pid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.heapMemoryUsed)) {
        this.heapMemoryUsed = data().deepCopy(fields()[2].schema(), other.heapMemoryUsed);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.heapMemoryMax)) {
        this.heapMemoryMax = data().deepCopy(fields()[3].schema(), other.heapMemoryMax);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.nonheapMemoryUsed)) {
        this.nonheapMemoryUsed = data().deepCopy(fields()[4].schema(), other.nonheapMemoryUsed);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.nonheapMemoryMax)) {
        this.nonheapMemoryMax = data().deepCopy(fields()[5].schema(), other.nonheapMemoryMax);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.threadCount)) {
        this.threadCount = data().deepCopy(fields()[6].schema(), other.threadCount);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.daemonThreadCount)) {
        this.daemonThreadCount = data().deepCopy(fields()[7].schema(), other.daemonThreadCount);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.peakThreadCount)) {
        this.peakThreadCount = data().deepCopy(fields()[8].schema(), other.peakThreadCount);
        fieldSetFlags()[8] = true;
      }
    }
    
    /** Creates a Builder by copying an existing JavaProcess instance */
    private Builder(com.cgs.mpagent.proto.JavaProcess other) {
            super(com.cgs.mpagent.proto.JavaProcess.SCHEMA$);
      if (isValidValue(fields()[0], other.pid)) {
        this.pid = data().deepCopy(fields()[0].schema(), other.pid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.heapMemoryUsed)) {
        this.heapMemoryUsed = data().deepCopy(fields()[2].schema(), other.heapMemoryUsed);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.heapMemoryMax)) {
        this.heapMemoryMax = data().deepCopy(fields()[3].schema(), other.heapMemoryMax);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.nonheapMemoryUsed)) {
        this.nonheapMemoryUsed = data().deepCopy(fields()[4].schema(), other.nonheapMemoryUsed);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.nonheapMemoryMax)) {
        this.nonheapMemoryMax = data().deepCopy(fields()[5].schema(), other.nonheapMemoryMax);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.threadCount)) {
        this.threadCount = data().deepCopy(fields()[6].schema(), other.threadCount);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.daemonThreadCount)) {
        this.daemonThreadCount = data().deepCopy(fields()[7].schema(), other.daemonThreadCount);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.peakThreadCount)) {
        this.peakThreadCount = data().deepCopy(fields()[8].schema(), other.peakThreadCount);
        fieldSetFlags()[8] = true;
      }
    }

    /** Gets the value of the 'pid' field */
    public java.lang.Integer getPid() {
      return pid;
    }
    
    /** Sets the value of the 'pid' field */
    public com.cgs.mpagent.proto.JavaProcess.Builder setPid(int value) {
      validate(fields()[0], value);
      this.pid = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'pid' field has been set */
    public boolean hasPid() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'pid' field */
    public com.cgs.mpagent.proto.JavaProcess.Builder clearPid() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'name' field */
    public java.lang.CharSequence getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public com.cgs.mpagent.proto.JavaProcess.Builder setName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'name' field */
    public com.cgs.mpagent.proto.JavaProcess.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'heapMemoryUsed' field */
    public java.lang.Long getHeapMemoryUsed() {
      return heapMemoryUsed;
    }
    
    /** Sets the value of the 'heapMemoryUsed' field */
    public com.cgs.mpagent.proto.JavaProcess.Builder setHeapMemoryUsed(long value) {
      validate(fields()[2], value);
      this.heapMemoryUsed = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'heapMemoryUsed' field has been set */
    public boolean hasHeapMemoryUsed() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'heapMemoryUsed' field */
    public com.cgs.mpagent.proto.JavaProcess.Builder clearHeapMemoryUsed() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'heapMemoryMax' field */
    public java.lang.Long getHeapMemoryMax() {
      return heapMemoryMax;
    }
    
    /** Sets the value of the 'heapMemoryMax' field */
    public com.cgs.mpagent.proto.JavaProcess.Builder setHeapMemoryMax(long value) {
      validate(fields()[3], value);
      this.heapMemoryMax = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'heapMemoryMax' field has been set */
    public boolean hasHeapMemoryMax() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'heapMemoryMax' field */
    public com.cgs.mpagent.proto.JavaProcess.Builder clearHeapMemoryMax() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'nonheapMemoryUsed' field */
    public java.lang.Long getNonheapMemoryUsed() {
      return nonheapMemoryUsed;
    }
    
    /** Sets the value of the 'nonheapMemoryUsed' field */
    public com.cgs.mpagent.proto.JavaProcess.Builder setNonheapMemoryUsed(long value) {
      validate(fields()[4], value);
      this.nonheapMemoryUsed = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'nonheapMemoryUsed' field has been set */
    public boolean hasNonheapMemoryUsed() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'nonheapMemoryUsed' field */
    public com.cgs.mpagent.proto.JavaProcess.Builder clearNonheapMemoryUsed() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'nonheapMemoryMax' field */
    public java.lang.Long getNonheapMemoryMax() {
      return nonheapMemoryMax;
    }
    
    /** Sets the value of the 'nonheapMemoryMax' field */
    public com.cgs.mpagent.proto.JavaProcess.Builder setNonheapMemoryMax(long value) {
      validate(fields()[5], value);
      this.nonheapMemoryMax = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'nonheapMemoryMax' field has been set */
    public boolean hasNonheapMemoryMax() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'nonheapMemoryMax' field */
    public com.cgs.mpagent.proto.JavaProcess.Builder clearNonheapMemoryMax() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'threadCount' field */
    public java.lang.Integer getThreadCount() {
      return threadCount;
    }
    
    /** Sets the value of the 'threadCount' field */
    public com.cgs.mpagent.proto.JavaProcess.Builder setThreadCount(int value) {
      validate(fields()[6], value);
      this.threadCount = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'threadCount' field has been set */
    public boolean hasThreadCount() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'threadCount' field */
    public com.cgs.mpagent.proto.JavaProcess.Builder clearThreadCount() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'daemonThreadCount' field */
    public java.lang.Integer getDaemonThreadCount() {
      return daemonThreadCount;
    }
    
    /** Sets the value of the 'daemonThreadCount' field */
    public com.cgs.mpagent.proto.JavaProcess.Builder setDaemonThreadCount(int value) {
      validate(fields()[7], value);
      this.daemonThreadCount = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'daemonThreadCount' field has been set */
    public boolean hasDaemonThreadCount() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'daemonThreadCount' field */
    public com.cgs.mpagent.proto.JavaProcess.Builder clearDaemonThreadCount() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'peakThreadCount' field */
    public java.lang.Integer getPeakThreadCount() {
      return peakThreadCount;
    }
    
    /** Sets the value of the 'peakThreadCount' field */
    public com.cgs.mpagent.proto.JavaProcess.Builder setPeakThreadCount(int value) {
      validate(fields()[8], value);
      this.peakThreadCount = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'peakThreadCount' field has been set */
    public boolean hasPeakThreadCount() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'peakThreadCount' field */
    public com.cgs.mpagent.proto.JavaProcess.Builder clearPeakThreadCount() {
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    public JavaProcess build() {
      try {
        JavaProcess record = new JavaProcess();
        record.pid = fieldSetFlags()[0] ? this.pid : (java.lang.Integer) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.heapMemoryUsed = fieldSetFlags()[2] ? this.heapMemoryUsed : (java.lang.Long) defaultValue(fields()[2]);
        record.heapMemoryMax = fieldSetFlags()[3] ? this.heapMemoryMax : (java.lang.Long) defaultValue(fields()[3]);
        record.nonheapMemoryUsed = fieldSetFlags()[4] ? this.nonheapMemoryUsed : (java.lang.Long) defaultValue(fields()[4]);
        record.nonheapMemoryMax = fieldSetFlags()[5] ? this.nonheapMemoryMax : (java.lang.Long) defaultValue(fields()[5]);
        record.threadCount = fieldSetFlags()[6] ? this.threadCount : (java.lang.Integer) defaultValue(fields()[6]);
        record.daemonThreadCount = fieldSetFlags()[7] ? this.daemonThreadCount : (java.lang.Integer) defaultValue(fields()[7]);
        record.peakThreadCount = fieldSetFlags()[8] ? this.peakThreadCount : (java.lang.Integer) defaultValue(fields()[8]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}

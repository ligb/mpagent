/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cgs.mpagent.proto;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Disk extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Disk\",\"namespace\":\"com.cgs.mpagent.proto\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"total\",\"type\":\"double\"},{\"name\":\"used\",\"type\":\"double\"},{\"name\":\"Mounted\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public double total;
  @Deprecated public double used;
  @Deprecated public java.lang.CharSequence Mounted;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Disk() {}

  /**
   * All-args constructor.
   */
  public Disk(java.lang.CharSequence name, java.lang.Double total, java.lang.Double used, java.lang.CharSequence Mounted) {
    this.name = name;
    this.total = total;
    this.used = used;
    this.Mounted = Mounted;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return total;
    case 2: return used;
    case 3: return Mounted;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: total = (java.lang.Double)value$; break;
    case 2: used = (java.lang.Double)value$; break;
    case 3: Mounted = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'total' field.
   */
  public java.lang.Double getTotal() {
    return total;
  }

  /**
   * Sets the value of the 'total' field.
   * @param value the value to set.
   */
  public void setTotal(java.lang.Double value) {
    this.total = value;
  }

  /**
   * Gets the value of the 'used' field.
   */
  public java.lang.Double getUsed() {
    return used;
  }

  /**
   * Sets the value of the 'used' field.
   * @param value the value to set.
   */
  public void setUsed(java.lang.Double value) {
    this.used = value;
  }

  /**
   * Gets the value of the 'Mounted' field.
   */
  public java.lang.CharSequence getMounted() {
    return Mounted;
  }

  /**
   * Sets the value of the 'Mounted' field.
   * @param value the value to set.
   */
  public void setMounted(java.lang.CharSequence value) {
    this.Mounted = value;
  }

  /** Creates a new Disk RecordBuilder */
  public static com.cgs.mpagent.proto.Disk.Builder newBuilder() {
    return new com.cgs.mpagent.proto.Disk.Builder();
  }
  
  /** Creates a new Disk RecordBuilder by copying an existing Builder */
  public static com.cgs.mpagent.proto.Disk.Builder newBuilder(com.cgs.mpagent.proto.Disk.Builder other) {
    return new com.cgs.mpagent.proto.Disk.Builder(other);
  }
  
  /** Creates a new Disk RecordBuilder by copying an existing Disk instance */
  public static com.cgs.mpagent.proto.Disk.Builder newBuilder(com.cgs.mpagent.proto.Disk other) {
    return new com.cgs.mpagent.proto.Disk.Builder(other);
  }
  
  /**
   * RecordBuilder for Disk instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Disk>
    implements org.apache.avro.data.RecordBuilder<Disk> {

    private java.lang.CharSequence name;
    private double total;
    private double used;
    private java.lang.CharSequence Mounted;

    /** Creates a new Builder */
    private Builder() {
      super(com.cgs.mpagent.proto.Disk.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cgs.mpagent.proto.Disk.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.total)) {
        this.total = data().deepCopy(fields()[1].schema(), other.total);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.used)) {
        this.used = data().deepCopy(fields()[2].schema(), other.used);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Mounted)) {
        this.Mounted = data().deepCopy(fields()[3].schema(), other.Mounted);
        fieldSetFlags()[3] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Disk instance */
    private Builder(com.cgs.mpagent.proto.Disk other) {
            super(com.cgs.mpagent.proto.Disk.SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.total)) {
        this.total = data().deepCopy(fields()[1].schema(), other.total);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.used)) {
        this.used = data().deepCopy(fields()[2].schema(), other.used);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.Mounted)) {
        this.Mounted = data().deepCopy(fields()[3].schema(), other.Mounted);
        fieldSetFlags()[3] = true;
      }
    }

    /** Gets the value of the 'name' field */
    public java.lang.CharSequence getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public com.cgs.mpagent.proto.Disk.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'name' field */
    public com.cgs.mpagent.proto.Disk.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'total' field */
    public java.lang.Double getTotal() {
      return total;
    }
    
    /** Sets the value of the 'total' field */
    public com.cgs.mpagent.proto.Disk.Builder setTotal(double value) {
      validate(fields()[1], value);
      this.total = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'total' field has been set */
    public boolean hasTotal() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'total' field */
    public com.cgs.mpagent.proto.Disk.Builder clearTotal() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'used' field */
    public java.lang.Double getUsed() {
      return used;
    }
    
    /** Sets the value of the 'used' field */
    public com.cgs.mpagent.proto.Disk.Builder setUsed(double value) {
      validate(fields()[2], value);
      this.used = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'used' field has been set */
    public boolean hasUsed() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'used' field */
    public com.cgs.mpagent.proto.Disk.Builder clearUsed() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'Mounted' field */
    public java.lang.CharSequence getMounted() {
      return Mounted;
    }
    
    /** Sets the value of the 'Mounted' field */
    public com.cgs.mpagent.proto.Disk.Builder setMounted(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.Mounted = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'Mounted' field has been set */
    public boolean hasMounted() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'Mounted' field */
    public com.cgs.mpagent.proto.Disk.Builder clearMounted() {
      Mounted = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public Disk build() {
      try {
        Disk record = new Disk();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.total = fieldSetFlags()[1] ? this.total : (java.lang.Double) defaultValue(fields()[1]);
        record.used = fieldSetFlags()[2] ? this.used : (java.lang.Double) defaultValue(fields()[2]);
        record.Mounted = fieldSetFlags()[3] ? this.Mounted : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}

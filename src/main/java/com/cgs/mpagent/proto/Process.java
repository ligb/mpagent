/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cgs.mpagent.proto;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Process extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Process\",\"namespace\":\"com.cgs.mpagent.proto\",\"fields\":[{\"name\":\"pid\",\"type\":\"int\"},{\"name\":\"memory\",\"type\":\"int\"},{\"name\":\"command\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public int pid;
  @Deprecated public int memory;
  @Deprecated public java.lang.CharSequence command;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Process() {}

  /**
   * All-args constructor.
   */
  public Process(java.lang.Integer pid, java.lang.Integer memory, java.lang.CharSequence command) {
    this.pid = pid;
    this.memory = memory;
    this.command = command;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return pid;
    case 1: return memory;
    case 2: return command;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: pid = (java.lang.Integer)value$; break;
    case 1: memory = (java.lang.Integer)value$; break;
    case 2: command = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'pid' field.
   */
  public java.lang.Integer getPid() {
    return pid;
  }

  /**
   * Sets the value of the 'pid' field.
   * @param value the value to set.
   */
  public void setPid(java.lang.Integer value) {
    this.pid = value;
  }

  /**
   * Gets the value of the 'memory' field.
   */
  public java.lang.Integer getMemory() {
    return memory;
  }

  /**
   * Sets the value of the 'memory' field.
   * @param value the value to set.
   */
  public void setMemory(java.lang.Integer value) {
    this.memory = value;
  }

  /**
   * Gets the value of the 'command' field.
   */
  public java.lang.CharSequence getCommand() {
    return command;
  }

  /**
   * Sets the value of the 'command' field.
   * @param value the value to set.
   */
  public void setCommand(java.lang.CharSequence value) {
    this.command = value;
  }

  /** Creates a new Process RecordBuilder */
  public static com.cgs.mpagent.proto.Process.Builder newBuilder() {
    return new com.cgs.mpagent.proto.Process.Builder();
  }
  
  /** Creates a new Process RecordBuilder by copying an existing Builder */
  public static com.cgs.mpagent.proto.Process.Builder newBuilder(com.cgs.mpagent.proto.Process.Builder other) {
    return new com.cgs.mpagent.proto.Process.Builder(other);
  }
  
  /** Creates a new Process RecordBuilder by copying an existing Process instance */
  public static com.cgs.mpagent.proto.Process.Builder newBuilder(com.cgs.mpagent.proto.Process other) {
    return new com.cgs.mpagent.proto.Process.Builder(other);
  }
  
  /**
   * RecordBuilder for Process instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Process>
    implements org.apache.avro.data.RecordBuilder<Process> {

    private int pid;
    private int memory;
    private java.lang.CharSequence command;

    /** Creates a new Builder */
    private Builder() {
      super(com.cgs.mpagent.proto.Process.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cgs.mpagent.proto.Process.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.pid)) {
        this.pid = data().deepCopy(fields()[0].schema(), other.pid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.memory)) {
        this.memory = data().deepCopy(fields()[1].schema(), other.memory);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.command)) {
        this.command = data().deepCopy(fields()[2].schema(), other.command);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Process instance */
    private Builder(com.cgs.mpagent.proto.Process other) {
            super(com.cgs.mpagent.proto.Process.SCHEMA$);
      if (isValidValue(fields()[0], other.pid)) {
        this.pid = data().deepCopy(fields()[0].schema(), other.pid);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.memory)) {
        this.memory = data().deepCopy(fields()[1].schema(), other.memory);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.command)) {
        this.command = data().deepCopy(fields()[2].schema(), other.command);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'pid' field */
    public java.lang.Integer getPid() {
      return pid;
    }
    
    /** Sets the value of the 'pid' field */
    public com.cgs.mpagent.proto.Process.Builder setPid(int value) {
      validate(fields()[0], value);
      this.pid = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'pid' field has been set */
    public boolean hasPid() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'pid' field */
    public com.cgs.mpagent.proto.Process.Builder clearPid() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'memory' field */
    public java.lang.Integer getMemory() {
      return memory;
    }
    
    /** Sets the value of the 'memory' field */
    public com.cgs.mpagent.proto.Process.Builder setMemory(int value) {
      validate(fields()[1], value);
      this.memory = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'memory' field has been set */
    public boolean hasMemory() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'memory' field */
    public com.cgs.mpagent.proto.Process.Builder clearMemory() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'command' field */
    public java.lang.CharSequence getCommand() {
      return command;
    }
    
    /** Sets the value of the 'command' field */
    public com.cgs.mpagent.proto.Process.Builder setCommand(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.command = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'command' field has been set */
    public boolean hasCommand() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'command' field */
    public com.cgs.mpagent.proto.Process.Builder clearCommand() {
      command = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Process build() {
      try {
        Process record = new Process();
        record.pid = fieldSetFlags()[0] ? this.pid : (java.lang.Integer) defaultValue(fields()[0]);
        record.memory = fieldSetFlags()[1] ? this.memory : (java.lang.Integer) defaultValue(fields()[1]);
        record.command = fieldSetFlags()[2] ? this.command : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
